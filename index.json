[{"content":"\rDeep Neural Network\rBefore we further discuss the Long Short-Term Memory Model, we will first discuss the term of Deep learning where the main idea is on the Neural Network. So Neural Network is one branch of machine learning where the learning process imitates the way neurons in the human brain works. In Neural Network we know several terms, such as the input layer, hidden layer, and output layer. So the different betweetn Deep Learning and Neural Network architecture is the number of hidden layers specified. Simple Neural Network only has 1 hidden layer, whereas Deep Learning has more than 1 hidden layer.\nNerual Network architecture can also be characterized based on the direction of signal in training process: feed-forward and recurrent. In this material, we will discuss more the Recurrent Neural Network architecture.\nWe know that neural network uses an algorithm called Backpropagation to update the weights of the network. So what Backpropogation does is it first calculates the gradients from the error using the chain rule, then in updates the weights (Gradient Descent).\nWhen doing backpropogation in simple neural network (1 hidden layer) we might not encounter the problem update weights. But….\n\rWhen we build an architecture with a large number of hidden layer (Deep Neural Network) the model is likely to encounter update weight problem called vanishing / exploding gradient descent.\n\rVanishing / Exploding Gradient Descent\rVanishing Gradient Descent: the update value obtained will exponentially decrease when heading to the input layer. Here are the illustrations, which I took from: Michael Nguyen’s article\nGradient descent aims to adjust weights that allow the model to ‘learn’. the nature of the gradient that is, the greater the value of the gradient in the current layer, will affect in the next layer getting bigger. and vice versa. This is the problem. When doing BP, each node will calculate the gradient value and update its weight according to the gradient effect on the previous layer. so if the previous layer is small, then adjusting the weights in the current layer will be small. it causes the gradient to shrink exponentially when it goes to the input layer. so that when in the input layer it fails to do the learning due to vanishing gradient problems. so the model fails to learn when a pass forward is made again to make predictions.\nExploding Gradient Descent: the update value obtained will exponentially increase when heading to the input layer. The characteristics of the model have an exploding gradient problem, which is when the cost function results are NaN.\nHere is a link duscussion regarding to exploding grgadient descent: nan loss when training NN\n\r\rRecurrent Neural Network\rFrom the vasishing / exploding gradient problem mentioned above, the development of architecture from the RNN, namely LSTM and GRU, is able to handle the problem. will be discussed below. RNN itself has not been able to handle vanishing gradients due to short-term memory problems.\nSo what is RNN? RNN is a deep learning architecture model that is commonly used for sequential data. What’s the sequential data? The following are examples of sequential data cases:\nSentiment classification. Input: text, output: rating/sentiment class.\rTranslator. Input: text, output: text translator.\rTime series data: input: Numeric, output: forecasting result.\rSpeech Recognation: input: audio, output: text.\r\rRNN Concept\rThe main idea of RNN is to utilize sequential information processing. RNN is called repetitive because it performs the same task for each successive element, with output depending on the previous calculation.\nThe diagram above is the architecture of RNN after opening it unfolded. Suppose we have a sentence consisting of 10 words, it means that there will be 10 NN-layers formed separately. Each layer represents each word. The following are some explanations of the notation in the diagram above:\n\r\\(x_t\\) is an input at (time) \\(t\\).\rRNN stores an internal state \\(S_t\\) which becoming a memory in RNN. \\(S_t\\) is calculated based on the previous hidden state and the input in the current step. The activation function of \\(f\\) is usually nonlinear like tanh or ReLU.\r\r\r\\(S_t = f(U_{xt} + W_{St} − 1)\\).\r\r\n\r\\(O_t\\) is an output from each step \\(t\\)\r\rForward Pass\rFor example case studies related to sentiment classification. Then the input will contain one-hot vectors of words, and the output is a sentiment class. So a feed-forward pass scheme is performed as:\nEach layer describes each word.\rFor an explanation of the concept of the Forward pass, we look at the layer when \\(t\\) (in the middle).\r\r\rRemember that the RNN pays attention to the output calculation data at \\(t - 1\\). So initially we have to calculate the state at \\(S_t\\) first. Involving the multiplication of the input matrix \\(x_t\\) with the parameter \\(U\\) and summing the results of the product \\(s_{t1}\\). Then the results are processed with the tanh activation function. The calculation details are as follows:\r\r\r\\(s_t=tanh(U.x_t+W.s_{t−1)}\\)\r\r\n\rThe results from \\(s_t\\) are then passed to the output by tiling the matrix multiplication of the \\(V\\) parameters and then passed with the softmax activation function. The details are as follows:\r\r\r\\(\\hat{y}_t=softmax(V.s_t)\\)\r\r\nThe above process is often illustrated like:\n\rBackpropogation Through Time\rThe purpose of the RNN model training is to find the parameters \\(U, V,\\) and \\(W\\) which produce minimum errors. The term BTT arises because the RNN architecture pays attention to the previous time series. So to calculate the gradient at the time step \\(t\\), we must calculate the speech at step \\(t − 1, t − 2, t − 3\\) until it is at time \\(t = 1\\). If you are curious about how this algorithm works, I suggest to read more on this article: Part 3: Backpropogarion \u0026amp; Vanishing Gradient.\nAs mentioned in the previous chapter, the RNN model also has a vanishing gradient problem, because it cannot capture long-term dependencies. because the number of layers is too long, making the backprop process produces a gradient value that is getting smaller and even close to zero or is said to disappear when it arrives at the initial layers.\n\rThis is caused by the multiplication properties between fractions. Imagine that for example a fraction is 1/4, multiplied by another fraction such as 1/3, then in one operation the value is 1/12. Multiplied by other fractions such as 1/5, the value becomes 1/60, etc. This value will shrink exponentially, and with a small fractional value and many multiplication operations, the value will be close to zero.\n\rTo overcome this problem, there is a development of RNN model namely Long-Term Short Memory (LSTM).\n\r\r\rLSTM\rJust like RNN, LSTM has a sequential model which is illustrated with a green box. if unfolded the architecture becomes as below:\nThe difference between RNN and LSTM is that it has additional signal information that is given from one time step to the next time step which is commonly called “cell memory”. LSTM is designed to overcome the problem of vanishing gradient, using the gate mechanism.\nLSTM Network\rSo the components in LSTM consist of:\n\rForget Gate f (NN with sigmoid as activation function).\rCandidate Layer g (NN with tanh as activation function).\rInput Gate I (NN with sigmoid as activation function).\rOutput Gate O (NN with sigmoid as activation function).\rHidden State H (vector).\rMemory State C (vector).\r\rThe following is the LSTM diagram at the t-time step.\n\r\\(X_t\\) = Input vector at the t-time.\r\\(H_{t−1}\\) = Previous Hidden state.\r\\(C_{t−1}\\) = Previous Memory state.\r\\(H_t\\) = Current Hidden state.\r\\(C_t\\) = Current Memori state.\r[*] = multiplication operation.\r[+] = addition operation.\r\rso the input of each LSTM module is \\(X_t\\) (current input), \\(H_{t − 1}\\), and \\(C_{t − 1}\\). then the output is \\(H_t\\), and \\(C_t\\).\nextracted from Denny Britz’s article which is a summary of Christopher Olah’s article: Understanding LSTM Networks.\n\\(l, f, O\\) is the Input, Forget, and Output gates. Both input, forget, and output have the same function formula (sigmoid), which only distinguishes the matrix parameters (note the formula below). This means that the output of this gate has a vector of values between 0 to 1. zero means that the information is blocked completely, and one means that all information is included. The gate input controls how many states you have just computed for the current input that you want to let pass. The forget gate controls how many previous states you want to let pass. Finally, the gate output controls how many internal states you want to expose to the network (higher layer \u0026amp; next time step). All gates have the same dimensions as the hidden state dimension (etc.) as a measure for the hidden state. The output of the sigmoid gate will be multiplied by another value to control how much that value is used.\r\r\r\\(I= \\sigma(x_tU^I + s_{t-_1}W^I)\\) \\(f= \\sigma(x_tU^f + s_{t-_1}W^f)\\) \\(O= \\sigma(x_tU^O + s_{t-_1}W^O)\\) \r\rvalue 1 means “really take care of this element” while 0 means “completely get rid of this element”.\n\r\\(g\\) is a “candidate” hidden state that is computed based on the current input and the previous hidden state.\n\r\\(c_t\\) is the internal memory of the unit. It is a combination of the previous memory \\(c_{t-1}\\) multiplied by the forget gate, and the newly computed hidden state g, multiplied by the input gate. Thus, intuitively it is a combination of how we want to combine previous memory and the new input.\n\r\r\r\\(c_t=f_t*c_{t-_1} + I_t*g\\)\r\r\r\rImplementation LSTM with Keras\r# load packages required\rlibrary(keras)\rlibrary(RVerbalExpressions)\rlibrary(magrittr)\rlibrary(textclean)\rlibrary(tidyverse)\rlibrary(tidytext)\rlibrary(rsample)\rlibrary(yardstick)\rlibrary(caret)\r#set seed keras for reproducible result\ruse_session_with_seed(2)\r# set conda env\ruse_condaenv(\u0026quot;tensorflow\u0026quot;)\rImport Data\rIn this example we will use a case study of sentiment tweets about airlines in the US obtained from Kaggle.\ndata \u0026lt;- read_csv(\u0026quot;data_input/tweets.csv\u0026quot;)\rglimpse(data)\r## Observations: 14,640\r## Variables: 15\r## $ tweet_id \u0026lt;dbl\u0026gt; 5.703061e+17, 5.703011e+17, 5.703...\r## $ airline_sentiment \u0026lt;chr\u0026gt; \u0026quot;neutral\u0026quot;, \u0026quot;positive\u0026quot;, \u0026quot;neutral\u0026quot;,...\r## $ airline_sentiment_confidence \u0026lt;dbl\u0026gt; 1.0000, 0.3486, 0.6837, 1.0000, 1...\r## $ negativereason \u0026lt;chr\u0026gt; NA, NA, NA, \u0026quot;Bad Flight\u0026quot;, \u0026quot;Can\u0026#39;t ...\r## $ negativereason_confidence \u0026lt;dbl\u0026gt; NA, 0.0000, NA, 0.7033, 1.0000, 0...\r## $ airline \u0026lt;chr\u0026gt; \u0026quot;Virgin America\u0026quot;, \u0026quot;Virgin America...\r## $ airline_sentiment_gold \u0026lt;lgl\u0026gt; NA, NA, NA, NA, NA, NA, NA, NA, N...\r## $ name \u0026lt;chr\u0026gt; \u0026quot;cairdin\u0026quot;, \u0026quot;jnardino\u0026quot;, \u0026quot;yvonnalyn...\r## $ negativereason_gold \u0026lt;lgl\u0026gt; NA, NA, NA, NA, NA, NA, NA, NA, N...\r## $ retweet_count \u0026lt;dbl\u0026gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ...\r## $ text \u0026lt;chr\u0026gt; \u0026quot;@VirginAmerica What @dhepburn sa...\r## $ tweet_coord \u0026lt;chr\u0026gt; NA, NA, NA, NA, NA, NA, NA, NA, N...\r## $ tweet_created \u0026lt;chr\u0026gt; \u0026quot;2015-02-24 11:35:52 -0800\u0026quot;, \u0026quot;201...\r## $ tweet_location \u0026lt;chr\u0026gt; NA, NA, \u0026quot;Lets Play\u0026quot;, NA, NA, NA, ...\r## $ user_timezone \u0026lt;chr\u0026gt; \u0026quot;Eastern Time (US \u0026amp; Canada)\u0026quot;, \u0026quot;Pa...\r\rText Pre-Processing\rSetup regex\rmention\rmention \u0026lt;- rx() %\u0026gt;% rx_find(value = \u0026quot;@\u0026quot;) %\u0026gt;% rx_alnum() %\u0026gt;% rx_one_or_more()\rmention\r## [1] \u0026quot;(@)[A-z0-9]+\u0026quot;\r\u0026quot;@VirginAmerica What @dhepburn said.\u0026quot; %\u0026gt;% str_remove_all(pattern = mention) %\u0026gt;% str_squish()\r## [1] \u0026quot;What said.\u0026quot;\r\rhashtag\rhashtag \u0026lt;- rx() %\u0026gt;% rx_find(value = \u0026quot;#\u0026quot;) %\u0026gt;% rx_alnum() %\u0026gt;% rx_one_or_more()\rhashtag\r## [1] \u0026quot;(#)[A-z0-9]+\u0026quot;\r\u0026quot;@VirginAmerica I\u0026#39;m #elevategold for a good reason: you rock!!\u0026quot; %\u0026gt;% str_remove_all(pattern = mention) %\u0026gt;%\rstr_remove_all(pattern = hashtag) %\u0026gt;% str_squish()\r## [1] \u0026quot;I\u0026#39;m for a good reason: you rock!!\u0026quot;\r\rquestion mark\rquestion \u0026lt;- rx() %\u0026gt;% rx_find(value = \u0026quot;?\u0026quot;) %\u0026gt;% rx_one_or_more()\rquestion\r## [1] \u0026quot;(\\\\?)+\u0026quot;\r\rexclamation mark\rexclamation \u0026lt;- rx() %\u0026gt;% rx_find(value = \u0026quot;!\u0026quot;) %\u0026gt;% rx_one_or_more()\rexclamation\r## [1] \u0026quot;(!)+\u0026quot;\r\rpunctuation\rpunctuation \u0026lt;- rx_punctuation()\rpunctuation\r## [1] \u0026quot;[[:punct:]]\u0026quot;\r\rnumber\rnumber \u0026lt;- rx_digit()\rnumber\r## [1] \u0026quot;\\\\d\u0026quot;\r\rdollar sign\rdollar \u0026lt;- rx() %\u0026gt;% rx_find(\u0026quot;$\u0026quot;)\rdollar\r## [1] \u0026quot;(\\\\$)\u0026quot;\r\r\rText Cleansing\rreplace_url\r\u0026quot;@VirginAmerica Really missed a prime opportunity, there. https://t.co/mWpG7grEZP\u0026quot; %\u0026gt;% replace_url()\r## [1] \u0026quot;@VirginAmerica Really missed a prime opportunity, there. \u0026quot;\r\rreplace_emoticon\r\u0026quot;@SouthwestAir thanks! Very excited to see it :3\u0026quot; %\u0026gt;%\rreplace_emoticon()\r## [1] \u0026quot;@SouthwestAir thanks! Very excited to see it smiley \u0026quot;\r\rreplace_contruction\r\u0026quot;@united I\u0026#39;d thank you - but you didn\u0026#39;t help. taking 6 hours to reply isn\u0026#39;t actually helpful\u0026quot; %\u0026gt;% replace_contraction()\r## [1] \u0026quot;@united I would thank you - but you did not help. taking 6 hours to reply is not actually helpful\u0026quot;\r\rreplace_word_elongation\r\u0026quot;@VirginAmerica heyyyy guyyyys.. :/\u0026quot; %\u0026gt;% replace_word_elongation()\r## [1] \u0026quot;@VirginAmerica hey guys.. :/\u0026quot;\rdata \u0026lt;- data %\u0026gt;% mutate(\rtext_clean = text %\u0026gt;% replace_url() %\u0026gt;% replace_emoji() %\u0026gt;% replace_emoticon() %\u0026gt;% replace_html() %\u0026gt;% str_remove_all(pattern = mention) %\u0026gt;% str_remove_all(pattern = hashtag) %\u0026gt;% replace_contraction() %\u0026gt;% replace_word_elongation() %\u0026gt;% str_replace_all(pattern = question, replacement = \u0026quot;questionmark\u0026quot;) %\u0026gt;% str_replace_all(pattern = exclamation, replacement = \u0026quot;exclamationmark\u0026quot;) %\u0026gt;% str_remove_all(pattern = punctuation) %\u0026gt;% str_remove_all(pattern = number) %\u0026gt;% str_remove_all(pattern = dollar) %\u0026gt;% str_to_lower() %\u0026gt;% str_squish()\r)\rdata %\u0026gt;% select(text, text_clean) %\u0026gt;% sample_n(20)\r## # A tibble: 20 x 2\r## text text_clean ## \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; ## 1 @united How can I file a claim whe~ how can i file a claim when your ag~\r## 2 @USAirways Seriously. You can\u0026#39;t tw~ seriously you can not tweet and let~\r## 3 @JetBlue thank you will do!! You g~ thank you will doexclamationmark yo~\r## 4 @united what\u0026#39;s the hold up with fl~ what is the hold up with flight fro~\r## 5 @AmericanAir ticks me off. ticks me off ## 6 @AmericanAir but at least your aut~ but at least your automated message~\r## 7 @united the hotel you sent us to w~ the hotel you sent us to wouldnt ta~\r## 8 @AmericanAir your definition and m~ your definition and mine of min is ~\r## 9 @JetBlue why are you always so ama~ why are you always so amazingexclam~\r## 10 @JetBlue and The from @WSJ Team to~ and the from team to offer in acces~\r## 11 @JetBlue Oh that totally looks on ~ oh that totally looks on par with s~\r## 12 \u0026quot;@united Thank you!! \\U0001f60a\u0026quot; thank youexclamationmark smiling fa~\r## 13 @USAirways Still irritated that ou~ still irritated that our well plann~\r## 14 @united Sure. Follow for a sec an~ sure follow for a sec and i will ## 15 \u0026quot;@SouthwestAir your A-list program~ your alist program is a complete jo~\r## 16 @AmericanAir Thanks, both airlines~ thanks both airlines said that it i~\r## 17 @AmericanAir Thank you. Good sugge~ thank you good suggestion i checked~\r## 18 @united care less about the person~ care less about the person although~\r## 19 @SouthwestAir I was helped by a ni~ i was helped by a nice lady at phx ~\r## 20 @united we\u0026#39;ve been here since 3am ~ we have been here since am and you ~\r\r\rprepare datainput\rdata \u0026lt;- data %\u0026gt;% mutate(label = factor(airline_sentiment, levels = c(\u0026quot;negative\u0026quot;, \u0026quot;neutral\u0026quot;, \u0026quot;positive\u0026quot;)),\rlabel = as.numeric(label),\rlabel = label - 1) %\u0026gt;% select(text_clean, label) %\u0026gt;% na.omit()\rhead(data, 10)\r## # A tibble: 10 x 2\r## text_clean label\r## \u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt;\r## 1 what said 1\r## 2 plus you have added commercials to the e tongue sticking out erie~ 2\r## 3 i did not today must mean i need to take another tripexclamationm~ 1\r## 4 it is really aggressive to blast obnoxious entertainment in your ~ 0\r## 5 and it is a really big bad thing about it 0\r## 6 seriously would pay a flight for seats that did not have this pla~ 0\r## 7 yes nearly every time i fly vx this ear worm won t go away smiley 2\r## 8 really missed a prime opportunity for men without hats parody the~ 1\r## 9 well i did not but now i doexclamationmark laughing 2\r## 10 it was amazing and arrived an hour early you are too good to me 2\r\r\rTokenizer\rTokenizer aims to separate each word in the entire document into a token form. The num_words parameter is for setting the maximum number of words to be used, sorted according to the largest frequency order. words that rarely appear will be removed. from a total of 13291 unique words contained in the text data, we reduced it to 1024 which will be used to make the model. The lower parameter is a logic condition, if TRUE then all words will be transformed to lowercase (tolower).\nnum_words \u0026lt;- 1024 # prepare tokenizers\rtokenizer \u0026lt;- text_tokenizer(num_words = num_words,\rlower = TRUE) %\u0026gt;% fit_text_tokenizer(data$text_clean)\rpaste(\u0026quot;number of unique words:\u0026quot;, length(tokenizer$word_counts))\r## [1] \u0026quot;number of unique words: 13291\u0026quot;\rIntuition\rSuppose we have 5 pieces of text documents that are stored in the docs object. Then we made a token with a maximum of words / terms used, which is 4. It means that words that rarely appear will not be used during the train model. To see the number of unique words stored in the document dictionary, use the command token$word_counts. To see the list of words with the highest frequency of appearances, use the token$word_index command.\ndocs \u0026lt;- c(\u0026#39;Well done!\u0026#39;,\r\u0026#39;Good work\u0026#39;,\r\u0026#39;Great effort\u0026#39;,\r\u0026#39;nice work\u0026#39;,\r\u0026#39;Excellent!\u0026#39;)\rtokendocs \u0026lt;- text_tokenizer(num_words = 4, lower = TRUE) %\u0026gt;% fit_text_tokenizer(docs)\rpaste(\u0026quot;number of unique words\u0026quot;,length(tokendocs$word_counts))\r## [1] \u0026quot;number of unique words 8\u0026quot;\rtokendocs$word_index[1:4]\r## $work\r## [1] 1\r## ## $well\r## [1] 2\r## ## $done\r## [1] 3\r## ## $good\r## [1] 4\r\r\rSplitting Data\rSplitting data will be done into 3 parts, namely train, validation, and test. The proportion is 60% for trains and the remaining 40% is in partitions for data validation and testing.\nData Train is the data that we will use to train the model. Data Validation for evaluating hyperparameter tuning in models (adjust hidden layers, optimizers, learning rates, etc.). While the test data as an evaluator of the model that we make on unseen data.\nset.seed(100)\rintrain \u0026lt;- initial_split(data = data, prop = 0.8, strata = \u0026quot;label\u0026quot;)\rdata_train \u0026lt;- training(intrain)\rdata_test \u0026lt;- testing(intrain)\rset.seed(100)\rinval \u0026lt;- initial_split(data = data_test, prop = 0.5, strata = \u0026quot;label\u0026quot;)\rdata_val \u0026lt;- training(inval)\rdata_test \u0026lt;- testing(inval)\rmaxlen \u0026lt;- max(str_count(data$text_clean, \u0026quot;\\\\w+\u0026quot;)) + 1 paste(\u0026quot;maxiumum length words in data:\u0026quot;, maxlen)\r## [1] \u0026quot;maxiumum length words in data: 90\u0026quot;\r# prepare x\rdata_train_x \u0026lt;- texts_to_sequences(tokenizer, data_train$text_clean) %\u0026gt;%\rpad_sequences(maxlen = maxlen)\rdata_val_x \u0026lt;- texts_to_sequences(tokenizer, data_val$text_clean) %\u0026gt;%\rpad_sequences(maxlen = maxlen)\rdata_test_x \u0026lt;- texts_to_sequences(tokenizer, data_test$text_clean) %\u0026gt;%\rpad_sequences(maxlen = maxlen)\r# prepare y\rdata_train_y \u0026lt;- to_categorical(data_train$label, num_classes = 3)\rdata_val_y \u0026lt;- to_categorical(data_val$label, num_classes = 3)\rdata_test_y \u0026lt;- to_categorical(data_test$label, num_classes = 3)\rIntuition\rCommand texts_to_sequence() aims to create a matrix results of the transformation text to the form of a number sequence (integer). Then wrapped with the command pad_sequences() which aims to equalize the dimensions of the length on the entire document. Imagine the input layer of a matrix, it must have the same row and column. Therefore it is necessary to do padding. By default the value parameter will be set to 0. This means that if there are words that are not in our token (which has been limited by num_words) then it will be transformed to 0. The following is the illustration:\ntexts_to_sequences(tokendocs, c(\u0026quot;Excellent!\u0026quot;, \u0026quot;Good job bro, keep hard work\u0026quot;, \u0026quot;well done\u0026quot;)) %\u0026gt;% pad_sequences(maxlen = 5)\r## [,1] [,2] [,3] [,4] [,5]\r## [1,] 0 0 0 0 0\r## [2,] 0 0 0 0 1\r## [3,] 0 0 0 2 3\rThe result of text_to_sequences is a matrix of size \\(n ∗ maxlen\\). The example above consists of 3 text documents and is set to maxlen = 5. it will produce a \\(3 \\times 5\\) matrix which each index is a representative integer of the same words as tokendocs in the i-th list. Recall, the word done is on the 3rd list on our token, right? therefore the matrix result above in the third document and the last integer sequence is 3. Why does it appear in the last index? because in pad_sequences we don’t set parameters of the padding type whether “pre” or “post” and by default is “pre”.\ntokendocs$word_index[3]\r## $done\r## [1] 3\r\r\rArchitecture\rEmbedding Layer\rEmbedding Layers can only be used in the initial / first layer of the LSTM architecture. In a variety of deep learning frameworks such as Keras, the embedding layer aims to train text data into numerical vectors which represent the closeness of the meaning of each word.\nEmbedding layer accepts several parameters. Some examples are:\r* input_dim, which is the maximum dimension of the vocabulary that has been explained in the num_words section.\n\rinput_length, the maximum length of the word sequence in the document input.\n\routput_dim which is the embedding dimension of the output layer which will be passed to the next layer. generally is 32, but can be more dependent on the problem we face.\n\r\r\rInput received of 2D vectors with the form: {batch_size, sequence_length}, while the output received 3D tensor with the forms {batch_size, sequence_length, output_dim}.\n\r\rDeep Neural Layer\rThe Deep Network Layer accepts the embedding matrix as input and then is converted into smaller dimensions. The dimensions of the compression results have represented information from the data. In the case of data text, the deep learning architecture commonly used is RNN \u0026gt; LSTM / GRU.\n\ryou can check the Keras Documentation for the details sequential layers.\n\r\rOutput Layer\rThis output layer is the last layer in the deep learning architecture. At Keras use the layer_dense command where we need to set the unit parameters or how many neurons we want to build. In this case I use 3 units, because there are 3 classes we have (negative, neutral, positive).\n\rRandom Initialization\rWhen the neural network / deep learning model train often results in different results. Why? because NN and DL use weigth which is generated randomly (randomness initialization). therefore we need to set the numbers (x-random models) in order to get a fixed result when repeated in the train (reproducible result). this can be done with the seed parameter in the initializer_random_uniform command. for more details, read the question and answer article in Keras studio\n# initiate keras model sequence\rmodel \u0026lt;- keras_model_sequential()\r# model\rmodel %\u0026gt;%\r# layer input\rlayer_embedding(\rname = \u0026quot;input\u0026quot;,\rinput_dim = num_words,\rinput_length = maxlen,\routput_dim = 32, embeddings_initializer = initializer_random_uniform(minval = -0.05, maxval = 0.05, seed = 2)\r) %\u0026gt;%\r# layer dropout\rlayer_dropout(\rname = \u0026quot;embedding_dropout\u0026quot;,\rrate = 0.5\r) %\u0026gt;%\r# layer lstm 1\rlayer_lstm(\rname = \u0026quot;lstm\u0026quot;,\runits = 256,\rdropout = 0.2,\rrecurrent_dropout = 0.2,\rreturn_sequences = FALSE, recurrent_initializer = initializer_random_uniform(minval = -0.05, maxval = 0.05, seed = 2),\rkernel_initializer = initializer_random_uniform(minval = -0.05, maxval = 0.05, seed = 2)\r) %\u0026gt;%\r# layer output\rlayer_dense(\rname = \u0026quot;output\u0026quot;,\runits = 3,\ractivation = \u0026quot;softmax\u0026quot;, kernel_initializer = initializer_random_uniform(minval = -0.05, maxval = 0.05, seed = 2)\r)\r\rDropout parameters are added to reduce the risk of overfit. the range of dropout values between 0 to 1. commonly used is 0.2 to 0.5. the closer to 0 will tend to overfit, while the closer to 1 has the risk of underfit.\r\r\rCompiling Model\rFor two category classes, the lost function used is binary_crossentropy while for multiclass cases it uses categorical_crossentropy. There are not only 2 option, but the most common when working with classification cases, these 2 loss functions are used. Here are some loss function options from Keras Documentation\n# compile the model\rmodel %\u0026gt;% compile(\roptimizer = \u0026quot;adam\u0026quot;,\rmetrics = \u0026quot;accuracy\u0026quot;,\rloss = \u0026quot;categorical_crossentropy\u0026quot;\r)\r# model summary\rsummary(model)\r## ___________________________________________________________________________\r## Layer (type) Output Shape Param # ## ===========================================================================\r## input (Embedding) (None, 90, 32) 32768 ## ___________________________________________________________________________\r## embedding_dropout (Dropout) (None, 90, 32) 0 ## ___________________________________________________________________________\r## lstm (LSTM) (None, 256) 295936 ## ___________________________________________________________________________\r## output (Dense) (None, 3) 771 ## ===========================================================================\r## Total params: 329,475\r## Trainable params: 329,475\r## Non-trainable params: 0\r## ___________________________________________________________________________\r\r\rTrain the Model\r# model fit settings\repochs \u0026lt;- 10\rbatch_size \u0026lt;- 512\r# fit the model\rhistory \u0026lt;- model %\u0026gt;% fit(\rdata_train_x, data_train_y,\rbatch_size = batch_size, epochs = epochs,\rverbose = 1,\rvalidation_data = list(\rdata_val_x, data_val_y\r)\r)\r# history plot\rplot(history)\r\rModel Evaluation\r# predict on train\rdata_train_pred \u0026lt;- model %\u0026gt;%\rpredict_classes(data_train_x) %\u0026gt;%\ras.vector()\r# predict on val\rdata_val_pred \u0026lt;- model %\u0026gt;%\rpredict_classes(data_val_x) %\u0026gt;%\ras.vector()\r# predict on test\rdata_test_pred \u0026lt;- model %\u0026gt;%\rpredict_classes(data_test_x) %\u0026gt;%\ras.vector()\r# accuracy on data train\raccuracy_vec(\rtruth = factor(data_train$label,labels = c(\u0026quot;negative\u0026quot;, \u0026quot;neutral\u0026quot;, \u0026quot;positive\u0026quot;)),\restimate = factor(data_train_pred, labels = c(\u0026quot;negative\u0026quot;, \u0026quot;neutral\u0026quot;, \u0026quot;positive\u0026quot;))\r)\r## [1] 0.8056534\r# accuracy on data test\raccuracy_vec(\rtruth = factor(data_test$label,labels = c(\u0026quot;negative\u0026quot;, \u0026quot;neutral\u0026quot;, \u0026quot;positive\u0026quot;)),\restimate = factor(data_test_pred, labels = c(\u0026quot;negative\u0026quot;, \u0026quot;neutral\u0026quot;, \u0026quot;positive\u0026quot;))\r)\r## [1] 0.7895461\r\r\r","permalink":"http://example.org/post/text-lstm/","summary":"Deep Neural Network\rBefore we further discuss the Long Short-Term Memory Model, we will first discuss the term of Deep learning where the main idea is on the Neural Network. So Neural Network is one branch of machine learning where the learning process imitates the way neurons in the human brain works. In Neural Network we know several terms, such as the input layer, hidden layer, and output layer. So the different betweetn Deep Learning and Neural Network architecture is the number of hidden layers specified.","title":"Text Classification with LSTM"},{"content":"\r\rHere is a tutorial how to replicate an economist publication plot using ggplot2. Please prepare the library required first and download the data on the link below to follow the code.\nlink for download the report: https://www2.deloitte.com/content/dam/Deloitte/cr/Documents/public-sector/2014-Social-Progress-IndexRepIMP.pdf\nLoad Library\rlibrary(tidyverse)\rlibrary(pdftools)\rlibrary(ggthemes)\rlibrary(ggpubr)\rlibrary(tm)\rlibrary(grid)\rlibrary(ggrepel)\rlibrary(scales)\r\rImport Data\rdatatext \u0026lt;- pdf_text(\u0026quot;data_input/2014-Social-Progress-IndexRepIMP.pdf\u0026quot;)\r\rData Pre-Processing\rdatatext88 \u0026lt;- datatext[[88]] %\u0026gt;%\rread_lines()\rdata1 \u0026lt;- datatext88[7:50]\rhead(data1)\r#\u0026gt; [1] \u0026quot; 1 New Zealand $25,857 88.24 91.74 84.97 88.01 97.57 100.00\u0026quot;\r#\u0026gt; [2] \u0026quot; 2 Switzerland $39,293 88.19 94.87 89.78 79.92 98.33 99.92\u0026quot;\r#\u0026gt; [3] \u0026quot; 3 Iceland $33,880 88.07 94.32 88.19 81.71 98.78 100.00\u0026quot;\r#\u0026gt; [4] \u0026quot; 4 Netherlands $36,438 87.37 93.91 87.56 80.63 98.16 100.00\u0026quot;\r#\u0026gt; [5] \u0026quot; 5 Norway $47,547 87.12 93.59 86.94 80.82 98.71 100.00\u0026quot;\r#\u0026gt; [6] \u0026quot; 6 Sweden $34,945 87.08 94.59 84.71 81.95 98.26 100.00\u0026quot;\rall_data1_lines \u0026lt;- data1[1:44] %\u0026gt;%\rstr_squish() %\u0026gt;%\rstr_replace_all(\u0026quot;,\u0026quot;, \u0026quot;\u0026quot;)\rhead(all_data1_lines)\r#\u0026gt; [1] \u0026quot;1 New Zealand $25857 88.24 91.74 84.97 88.01 97.57 100.00\u0026quot;\r#\u0026gt; [2] \u0026quot;2 Switzerland $39293 88.19 94.87 89.78 79.92 98.33 99.92\u0026quot; #\u0026gt; [3] \u0026quot;3 Iceland $33880 88.07 94.32 88.19 81.71 98.78 100.00\u0026quot; #\u0026gt; [4] \u0026quot;4 Netherlands $36438 87.37 93.91 87.56 80.63 98.16 100.00\u0026quot;\r#\u0026gt; [5] \u0026quot;5 Norway $47547 87.12 93.59 86.94 80.82 98.71 100.00\u0026quot; #\u0026gt; [6] \u0026quot;6 Sweden $34945 87.08 94.59 84.71 81.95 98.26 100.00\u0026quot;\rall_data1_lines_sub \u0026lt;- data1[-c(1, 13, 16, 23,25,28,37)] %\u0026gt;%\rstr_squish() %\u0026gt;%\rstr_replace_all(\u0026quot;,\u0026quot;, \u0026quot;\u0026quot;) %\u0026gt;%\rstrsplit(split = \u0026quot; \u0026quot;)\rhead(all_data1_lines_sub)\r#\u0026gt; [[1]]\r#\u0026gt; [1] \u0026quot;2\u0026quot; \u0026quot;Switzerland\u0026quot; \u0026quot;$39293\u0026quot; \u0026quot;88.19\u0026quot; \u0026quot;94.87\u0026quot; #\u0026gt; [6] \u0026quot;89.78\u0026quot; \u0026quot;79.92\u0026quot; \u0026quot;98.33\u0026quot; \u0026quot;99.92\u0026quot; #\u0026gt; #\u0026gt; [[2]]\r#\u0026gt; [1] \u0026quot;3\u0026quot; \u0026quot;Iceland\u0026quot; \u0026quot;$33880\u0026quot; \u0026quot;88.07\u0026quot; \u0026quot;94.32\u0026quot; \u0026quot;88.19\u0026quot; \u0026quot;81.71\u0026quot; #\u0026gt; [8] \u0026quot;98.78\u0026quot; \u0026quot;100.00\u0026quot; #\u0026gt; #\u0026gt; [[3]]\r#\u0026gt; [1] \u0026quot;4\u0026quot; \u0026quot;Netherlands\u0026quot; \u0026quot;$36438\u0026quot; \u0026quot;87.37\u0026quot; \u0026quot;93.91\u0026quot; #\u0026gt; [6] \u0026quot;87.56\u0026quot; \u0026quot;80.63\u0026quot; \u0026quot;98.16\u0026quot; \u0026quot;100.00\u0026quot; #\u0026gt; #\u0026gt; [[4]]\r#\u0026gt; [1] \u0026quot;5\u0026quot; \u0026quot;Norway\u0026quot; \u0026quot;$47547\u0026quot; \u0026quot;87.12\u0026quot; \u0026quot;93.59\u0026quot; \u0026quot;86.94\u0026quot; \u0026quot;80.82\u0026quot; \u0026quot;98.71\u0026quot; #\u0026gt; [9] \u0026quot;100.00\u0026quot;\r#\u0026gt; #\u0026gt; [[5]]\r#\u0026gt; [1] \u0026quot;6\u0026quot; \u0026quot;Sweden\u0026quot; \u0026quot;$34945\u0026quot; \u0026quot;87.08\u0026quot; \u0026quot;94.59\u0026quot; \u0026quot;84.71\u0026quot; \u0026quot;81.95\u0026quot; \u0026quot;98.26\u0026quot; #\u0026gt; [9] \u0026quot;100.00\u0026quot;\r#\u0026gt; #\u0026gt; [[6]]\r#\u0026gt; [1] \u0026quot;7\u0026quot; \u0026quot;Canada\u0026quot; \u0026quot;$35936\u0026quot; \u0026quot;86.95\u0026quot; \u0026quot;93.52\u0026quot; \u0026quot;80.31\u0026quot; \u0026quot;87.02\u0026quot; \u0026quot;98.10\u0026quot; #\u0026gt; [9] \u0026quot;95.76\u0026quot;\rdatadf88_sub \u0026lt;- plyr::ldply(all_data1_lines_sub) %\u0026gt;%\rselect(c(V2,V3,V4)) %\u0026gt;%\rrename(Country = V2,\rGDP = V3,\rSPI = V4)\rdatadf88_sub_2 \u0026lt;- data1[c(1,13,16,23,25)] %\u0026gt;%\rstr_squish() %\u0026gt;%\rstr_replace_all(\u0026quot;,\u0026quot;, \u0026quot;\u0026quot;) %\u0026gt;%\rstrsplit(split = \u0026quot; \u0026quot;) %\u0026gt;%\rplyr::ldply() %\u0026gt;%\rmutate(V2 = paste(V2,V3)) %\u0026gt;%\rselect(c(V2,V4,V5)) %\u0026gt;%\rrename(Country = V2,\rGDP = V4,\rSPI = V5)\rdatadf88_sub_3 \u0026lt;- data1[c(28,37)] %\u0026gt;%\rstr_squish() %\u0026gt;%\rstr_replace_all(\u0026quot;,\u0026quot;, \u0026quot;\u0026quot;) %\u0026gt;%\rstrsplit(split = \u0026quot; \u0026quot;) %\u0026gt;%\rplyr::ldply() %\u0026gt;%\rmutate(V2 = paste(V2,V3,V4)) %\u0026gt;%\rselect(c(V2,V5,V6)) %\u0026gt;%\rrename(Country = V2,\rGDP = V5,\rSPI = V6)\rdf88 \u0026lt;- rbind(datadf88_sub,datadf88_sub_2,datadf88_sub_3)\rdf88$GDP \u0026lt;- str_remove(df88$GDP, \u0026quot;[$]\u0026quot;)\rdf88 \u0026lt;- df88 %\u0026gt;%\rmutate(GDP = as.numeric(GDP),\rSPI = as.numeric(SPI))\r#Next page\rdatatext90 \u0026lt;- datatext[[90]] %\u0026gt;%\rread_lines()\rdata2 \u0026lt;- datatext90[7:50]\rall_data2_lines \u0026lt;- data2[1:44] %\u0026gt;%\rstr_squish() %\u0026gt;%\rstr_replace_all(\u0026quot;,\u0026quot;, \u0026quot;\u0026quot;)\rall_data2_lines_sub \u0026lt;- data2[-c(3, 17, 19, 21, 24, 25, 41)] %\u0026gt;%\rstr_squish() %\u0026gt;%\rstr_replace_all(\u0026quot;,\u0026quot;, \u0026quot;\u0026quot;) %\u0026gt;%\rstrsplit(split = \u0026quot; \u0026quot;)\rdatadf90_sub \u0026lt;- plyr::ldply(all_data2_lines_sub) %\u0026gt;%\rselect(c(V2,V3,V4)) %\u0026gt;%\rrename(Country = V2,\rGDP = V3,\rSPI = V4)\rdatadf90_sub_2 \u0026lt;- data2[c(19, 21, 24, 25, 41)] %\u0026gt;%\rstr_squish() %\u0026gt;%\rstr_replace_all(\u0026quot;,\u0026quot;, \u0026quot;\u0026quot;) %\u0026gt;%\rstrsplit(split = \u0026quot; \u0026quot;) %\u0026gt;%\rplyr::ldply() %\u0026gt;%\rmutate(V2 = paste(V2,V3)) %\u0026gt;%\rselect(c(V2,V4,V5)) %\u0026gt;%\rrename(Country = V2,\rGDP = V4,\rSPI = V5)\rdatadf90_sub_3 \u0026lt;- data2[c(3,17)] %\u0026gt;%\rstr_squish() %\u0026gt;%\rstr_replace_all(\u0026quot;,\u0026quot;, \u0026quot;\u0026quot;) %\u0026gt;%\rstrsplit(split = \u0026quot; \u0026quot;) %\u0026gt;%\rplyr::ldply() %\u0026gt;%\rmutate(V2 = paste(V2,V3,V4)) %\u0026gt;%\rselect(c(V2,V5,V6)) %\u0026gt;%\rrename(Country = V2,\rGDP = V5,\rSPI = V6)\rdf90 \u0026lt;- rbind(datadf90_sub,datadf90_sub_2,datadf90_sub_3)\rdf90$GDP \u0026lt;- str_remove(df90$GDP, \u0026quot;[$]\u0026quot;)\rdf90 \u0026lt;- df90 %\u0026gt;%\rmutate(GDP = as.numeric(GDP),\rSPI = as.numeric(SPI))\r#The last Page\rdatatext92 \u0026lt;- datatext[[92]] %\u0026gt;%\rread_lines()\rdata3 \u0026lt;- datatext92[7:50]\rall_data3_lines \u0026lt;- data3[1:44] %\u0026gt;%\rstr_squish() %\u0026gt;%\rstr_replace_all(\u0026quot;,\u0026quot;, \u0026quot;\u0026quot;)\rall_data3_lines_sub \u0026lt;- data3[-c(22, 24, 43)] %\u0026gt;%\rstr_squish() %\u0026gt;%\rstr_replace_all(\u0026quot;,\u0026quot;, \u0026quot;\u0026quot;) %\u0026gt;%\rstrsplit(split = \u0026quot; \u0026quot;)\rdatadf92_sub \u0026lt;- plyr::ldply(all_data3_lines_sub) %\u0026gt;%\rselect(c(V2,V3,V4)) %\u0026gt;%\rrename(Country = V2,\rGDP = V3,\rSPI = V4)\rdatadf92_sub_2 \u0026lt;- data3[24] %\u0026gt;%\rstr_squish() %\u0026gt;%\rstr_replace_all(\u0026quot;,\u0026quot;, \u0026quot;\u0026quot;) %\u0026gt;%\rstrsplit(split = \u0026quot; \u0026quot;) %\u0026gt;%\rplyr::ldply() %\u0026gt;%\rmutate(V2 = paste(V2,V3)) %\u0026gt;%\rselect(c(V2,V4,V5)) %\u0026gt;%\rrename(Country = V2,\rGDP = V4,\rSPI = V5)\rdatadf92_sub_3 \u0026lt;- data3[c(22,43)] %\u0026gt;%\rstr_squish() %\u0026gt;%\rstr_replace_all(\u0026quot;,\u0026quot;, \u0026quot;\u0026quot;) %\u0026gt;%\rstrsplit(split = \u0026quot; \u0026quot;) %\u0026gt;%\rplyr::ldply() %\u0026gt;%\rmutate(V2 = paste(V2,V3,V4)) %\u0026gt;%\rselect(c(V2,V5,V6)) %\u0026gt;%\rrename(Country = V2,\rGDP = V5,\rSPI = V6)\rdf92 \u0026lt;- rbind(datadf92_sub,datadf92_sub_2,datadf92_sub_3)\rdf92$GDP \u0026lt;- str_remove(df92$GDP, \u0026quot;[$]\u0026quot;)\rdf92 \u0026lt;- df92 %\u0026gt;%\rmutate(GDP = as.numeric(GDP),\rSPI = as.numeric(SPI))\r#combine all data\rdata \u0026lt;- rbind(df88, df90, df92)\rdata \u0026lt;- data %\u0026gt;% arrange(desc(SPI)) %\u0026gt;%\rmutate(Country = ifelse(Country == \u0026quot;United Kingdom\u0026quot;, \u0026quot;Britain\u0026quot;, Country)) %\u0026gt;%\rmutate(Col_Country = ifelse(Country == \u0026quot;Costa Rica\u0026quot; | Country == \u0026quot;Brazil\u0026quot; | Country == \u0026quot;China\u0026quot; | Country == \u0026quot;Chad\u0026quot; | Country == \u0026quot;Angola\u0026quot; | Country == \u0026quot;India\u0026quot; |\rCountry == \u0026quot;Iran\u0026quot; | Country == \u0026quot;Philippines\u0026quot; | Country == \u0026quot;Jamaica\u0026quot; | Country == \u0026quot;Russia\u0026quot; | Country == \u0026quot;Greece\u0026quot;| Country == \u0026quot;Italy\u0026quot; | Country == \u0026quot;Israel\u0026quot; | Country == \u0026quot;Saudi Arabia\u0026quot; | Country == \u0026quot;France\u0026quot; |\rCountry == \u0026quot;Korea\u0026quot; | Country == \u0026quot;Japan\u0026quot; | Country == \u0026quot;Britain\u0026quot; | Country == \u0026quot;Germany\u0026quot; |\rCountry == \u0026quot;Canada\u0026quot; | Country == \u0026quot;United Arab Emirates\u0026quot; | Country == \u0026quot;Kuwait\u0026quot; |\rCountry == \u0026quot;Switzerland\u0026quot; | Country ==\u0026quot;Norway\u0026quot;| Country == \u0026quot;United States\u0026quot;, \u0026quot;navy\u0026quot;,\u0026quot;blue\u0026quot;)) %\u0026gt;%\rmutate(Col_Country = as.factor(Col_Country))\r\rCreate Plot\rp \u0026lt;- ggplot(data, aes(x=GDP,y=SPI)) p\rp2 \u0026lt;- p + theme_hc() +\rgeom_point(colour=\u0026quot;black\u0026quot;, size = 2.7, pch=21, aes(fill=Col_Country)) +\rscale_fill_manual(values = c(\u0026quot;#86d7f2\u0026quot;,\u0026quot;#00485d\u0026quot;), labels = NULL)\rp2\rp3 \u0026lt;- p2 + geom_smooth(method = \u0026quot;loess\u0026quot;,\rspan = 1.7,\rformula = y~x,\rse = FALSE,\rcolor = \u0026quot;#bf1912\u0026quot;, size = 1.5)\rp3\rp4 \u0026lt;- p3 + labs(title=\u0026quot;Measuring development\u0026quot;,\rsubtitle=\u0026quot;Social progress index and GDP per person\u0026quot;,\ry=\u0026quot;Social progress index, 2014\u0026quot;,\rx=\u0026quot;GDP per person, 2012, $ at PPP*\u0026quot;,\rcaption=\u0026quot;*Purchasing-Power Parity, 2005 prices\u0026quot;) +\rscale_y_continuous(breaks =seq(20,90,10), limits = c(20,90)) +\rscale_x_continuous(breaks = seq(0,50000,10000) , limits = c(0,50000), labels = comma) +\rtheme(plot.title = element_text(size = 11, face = \u0026quot;bold\u0026quot;, hjust = 0.0, color = \u0026quot;black\u0026quot;),\rplot.subtitle = element_text(size = 9, hjust = 0.0, color = \u0026quot;black\u0026quot;),\rplot.caption = element_text(size = 8, color = \u0026quot;black\u0026quot;),\rlegend.position = \u0026quot;none\u0026quot;,\raxis.title = element_text(size = 8, face = \u0026quot;italic\u0026quot;))\rp4\rlabelpoin \u0026lt;- c(\u0026quot;Costa Rica\u0026quot;,\u0026quot;Brazil\u0026quot;,\u0026quot;China\u0026quot;,\u0026quot;Chad\u0026quot;,\u0026quot;Angola\u0026quot;,\r\u0026quot;India\u0026quot;,\u0026quot;Iran\u0026quot;,\u0026quot;Philippines\u0026quot;,\u0026quot;Jamaica\u0026quot;,\u0026quot;Russia\u0026quot;, \u0026quot;Greece\u0026quot;,\u0026quot;Italy\u0026quot;,\u0026quot;Israel\u0026quot;,\u0026quot;Saudi Arabia\u0026quot;,\u0026quot;France\u0026quot;,\r\u0026quot;Korea\u0026quot;,\u0026quot;Japan\u0026quot;,\u0026quot;Britain\u0026quot;,\u0026quot;Germany\u0026quot;,\u0026quot;Canada\u0026quot;,\u0026quot;United Arab Emirates\u0026quot;,\r\u0026quot;Kuwait\u0026quot;,\u0026quot;Switzerland\u0026quot;,\u0026quot;Norway\u0026quot;,\u0026quot;United States\u0026quot;)\rset.seed(2012)\rp5 \u0026lt;- p4 + geom_text_repel(aes(label = Country),\rcolor = \u0026quot;black\u0026quot;, data = subset(data, Country %in% labelpoin),\rforce = 30)\rp5\r# add multiple caption\rp6 \u0026lt;- ggplotGrob(p5)\rk \u0026lt;- which(p6$layout$name==\u0026quot;caption\u0026quot;)\rgrbTxt \u0026lt;- p6$grobs[[k]]$children[[1]]\rgrbTxt$label \u0026lt;- \u0026quot;Source: Social Progress Imperative\u0026quot;\rgrbTxt$name \u0026lt;- \u0026quot;GRID.text.left\u0026quot;\rgrbTxt$x \u0026lt;- unit(0,\u0026quot;npc\u0026quot;)\rgrbTxt$hjust \u0026lt;- 0\rgrbTxt$gp$col \u0026lt;- \u0026quot;black\u0026quot;\rp6$grobs[[k]] \u0026lt;- addGrob(p6$grobs[[k]],grbTxt)\rgrid.draw(p6)\r\r","permalink":"http://example.org/post/2018-09-15-reproduce-economist-plot/","summary":"Here is a tutorial how to replicate an economist publication plot using ggplot2. Please prepare the library required first and download the data on the link below to follow the code.\nlink for download the report: https://www2.deloitte.com/content/dam/Deloitte/cr/Documents/public-sector/2014-Social-Progress-IndexRepIMP.pdf\nLoad Library\rlibrary(tidyverse)\rlibrary(pdftools)\rlibrary(ggthemes)\rlibrary(ggpubr)\rlibrary(tm)\rlibrary(grid)\rlibrary(ggrepel)\rlibrary(scales)\r\rImport Data\rdatatext \u0026lt;- pdf_text(\u0026quot;data_input/2014-Social-Progress-IndexRepIMP.pdf\u0026quot;)\r\rData Pre-Processing\rdatatext88 \u0026lt;- datatext[[88]] %\u0026gt;%\rread_lines()\rdata1 \u0026lt;- datatext88[7:50]\rhead(data1)\r#\u0026gt; [1] \u0026quot; 1 New Zealand $25,857 88.","title":"Reproduce Economist Plot"},{"content":" one of 5 holders of RStudio Trainer Certification in Indonesia.\n Experiences  Sr. Instructor at Algoritma Data Science Education Center  Sep, 2018 - Present   Laboratory Assistant at Islamic University of Indonesia  Exploratory Data Analysis Mar, 2018 - Aug, 2018   Lecture Assistant at Islamic University of Indonesia  Mar, 2018 - Aug, 2018   Analyst - Internship Program at PT. Astra International Tbk - AHM  Nov, 2017 - Dec, 2017   Biotech - Internship program at PT. East West Seed Indonesia  Jan, 2017 - Feb, 2017    Education  B.S. in Subject: Statistics at Islamic University of Indonesia  2014 - 2018    DS Mentor Project 🤓   Course Production Algoritma Data Science Academy\n  In-house corporate training course production machine learning specialization at PT. Indo Tambangraya Megah.\n  In-house corporate training course production machine learning specialization at PT. Sigma Cipta Caraka.\n  In-house corporate training course production data visualization specialization at PT. OCBC NISP.\n  Twitter Sentiment Analysis Mini Data Science Series in collaboration with Tokopedia.\n  Algoritma Data Science Series Automate Business Reporting with R.\n  In-house Corporate Training course production Business Translator at PT. Indo Tambangraya Megah.\n  In-house Corporate Training course production Data Visualization at SKK Migas.\n  In-house Corporate Training course production Machine Learning specialization at Permata Bank.\n    Algoritma Academy Project Mentor:\n  Build a Recommendation System to show what movies to watch next, by using Memory-Based Collaborative Filtering Machine Learning Algorithm.\n  RFM Analysis Dashboard: Getting knowledge how the customers are behaving from purchase recency, purchase frequency, and monetary value data.\n    Indosat Capstone Project Mentor:\n  Predicting B2B Customer Repurchase using Naive Bayes Classifier and B2B Recommendation System Dashboard.\n  Predictive Modelling of FAB Opportunity Status using Logistic Regression.\n  Forecasting Warehouses using Time-Series Predictive Model.\n  International Carriers Clustering and Traffic Anomaly Detection using R.\n  Forecasting Data Revenue Indosat Ooredoo using Multi Seasonal Time Series.\n    BCA Capstone Project Mentor:\n  Predictive system for repayment probability of the Housing Ownership Credit debtor.\n  Implementation text mining for the customer\u0026rsquo;s complaint identification system.\n  Machine learning application for the recommendation and prediction for audit findings.\n  Implementing text mining for negative account information record system.\n  Time to defult in credit scoring using survival analysis\n  Identifying cross selling opportunities on API product using Collaborative filtering.\n    ","permalink":"http://example.org/about/","summary":"one of 5 holders of RStudio Trainer Certification in Indonesia.\n Experiences  Sr. Instructor at Algoritma Data Science Education Center  Sep, 2018 - Present   Laboratory Assistant at Islamic University of Indonesia  Exploratory Data Analysis Mar, 2018 - Aug, 2018   Lecture Assistant at Islamic University of Indonesia  Mar, 2018 - Aug, 2018   Analyst - Internship Program at PT. Astra International Tbk - AHM  Nov, 2017 - Dec, 2017   Biotech - Internship program at PT.","title":"About Me"},{"content":"C19-Dashboard  COVID-19 Dashboard Monitoring https://ahmadhusain.shinyapps.io/covid19-dashboard/\n Dashboard monitor pandemic situation globally and in Indonesia. Built using Shiny and Shinydashboard in R. This project aims to provide the information visually the total number of confirmed cases, recovered, and death. The data will be updated automatically every hour.\nImage-Classification with Random Forest an example script if you want to do image-classification stuff with Random Forest. The datasets are available at Malaria Dataset cell_images.zip. Please download so you can follow the script.\nHere is a quick brief of the project workflow.\nIf you want to try predict an image, please use one of the cell images listed here.\n Ya, we know it\u0026rsquo;s not a best measure to inference image by using Random Forest :p\n  Learn-R Data Visualization  Apply sortable \u0026amp; parsons to learnr tutorials https://ahmadhusain.shinyapps.io/learnr-dv/\n learnr-dv is an interactive tutorial and exercise built with learnr, parsons and sortable packages. The tutorial consist of content about understanding the context of visualize the data using ggplot2.\nML in R Cheatsheet  Machine Learning Modelling in R Cheatsheet. https://github.com/ahmadhusain/mlinR-cheatsheet\n Is a cheat sheet to help determine what machine learning algorithms appropriate to used. Also for further improvement will be adding case examples for each machine learning method using R, obviously.\nCapstone Project Leaderboard  Shinyapps for automated scoring https://github.com/teamalgoritma/capstoneml-leaderboard\n build leaderboard using shiny for machine learning capstone project in Algoritma Data Science Academy.\n","permalink":"http://example.org/project/","summary":"C19-Dashboard  COVID-19 Dashboard Monitoring https://ahmadhusain.shinyapps.io/covid19-dashboard/\n Dashboard monitor pandemic situation globally and in Indonesia. Built using Shiny and Shinydashboard in R. This project aims to provide the information visually the total number of confirmed cases, recovered, and death. The data will be updated automatically every hour.\nImage-Classification with Random Forest an example script if you want to do image-classification stuff with Random Forest. The datasets are available at Malaria Dataset cell_images.","title":"Projects"}]